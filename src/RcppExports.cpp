// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// allocate
List allocate(double flow, NumericVector soc, NumericVector vol, NumericVector share, NumericVector level, LogicalVector active, NumericVector eff, NumericVector cap);
RcppExport SEXP _eflows_allocate(SEXP flowSEXP, SEXP socSEXP, SEXP volSEXP, SEXP shareSEXP, SEXP levelSEXP, SEXP activeSEXP, SEXP effSEXP, SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type flow(flowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soc(socSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vol(volSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type share(shareSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type level(levelSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type active(activeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eff(effSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cap(capSEXP);
    rcpp_result_gen = Rcpp::wrap(allocate(flow, soc, vol, share, level, active, eff, cap));
    return rcpp_result_gen;
END_RCPP
}
// subset_range
NumericVector subset_range(NumericVector vec, int start, int end);
RcppExport SEXP _eflows_subset_range(SEXP vecSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_range(vec, start, end));
    return rcpp_result_gen;
END_RCPP
}
// depreciate
float depreciate(float x, float depreciation);
RcppExport SEXP _eflows_depreciate(SEXP xSEXP, SEXP depreciationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type depreciation(depreciationSEXP);
    rcpp_result_gen = Rcpp::wrap(depreciate(x, depreciation));
    return rcpp_result_gen;
END_RCPP
}
// seq_depreciated
NumericVector seq_depreciated(int length, float depreciation);
RcppExport SEXP _eflows_seq_depreciated(SEXP lengthSEXP, SEXP depreciationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< float >::type depreciation(depreciationSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_depreciated(length, depreciation));
    return rcpp_result_gen;
END_RCPP
}
// backshift
NumericMatrix backshift(NumericMatrix matrix, NumericVector price, int horizon, float depreciation, float cap, float size);
RcppExport SEXP _eflows_backshift(SEXP matrixSEXP, SEXP priceSEXP, SEXP horizonSEXP, SEXP depreciationSEXP, SEXP capSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< float >::type depreciation(depreciationSEXP);
    Rcpp::traits::input_parameter< float >::type cap(capSEXP);
    Rcpp::traits::input_parameter< float >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(backshift(matrix, price, horizon, depreciation, cap, size));
    return rcpp_result_gen;
END_RCPP
}
// formatFlexSteps
NumericMatrix formatFlexSteps(NumericMatrix matrix, IntegerVector flex_step, int max_step);
RcppExport SEXP _eflows_formatFlexSteps(SEXP matrixSEXP, SEXP flex_stepSEXP, SEXP max_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type flex_step(flex_stepSEXP);
    Rcpp::traits::input_parameter< int >::type max_step(max_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(formatFlexSteps(matrix, flex_step, max_step));
    return rcpp_result_gen;
END_RCPP
}
// divideInChunks
NumericVector divideInChunks(float x, float precision);
RcppExport SEXP _eflows_divideInChunks(SEXP xSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(divideInChunks(x, precision));
    return rcpp_result_gen;
END_RCPP
}
// whichMin
int whichMin(NumericVector x);
RcppExport SEXP _eflows_whichMin(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(whichMin(x));
    return rcpp_result_gen;
END_RCPP
}
// sliceCurrent
NumericVector sliceCurrent(NumericVector vec, int start, int end);
RcppExport SEXP _eflows_sliceCurrent(SEXP vecSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(sliceCurrent(vec, start, end));
    return rcpp_result_gen;
END_RCPP
}
// envCurrent
Environment envCurrent(Environment input, Environment out, int start, int span);
RcppExport SEXP _eflows_envCurrent(SEXP inputSEXP, SEXP outSEXP, SEXP startSEXP, SEXP spanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Environment >::type out(outSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type span(spanSEXP);
    rcpp_result_gen = Rcpp::wrap(envCurrent(input, out, start, span));
    return rcpp_result_gen;
END_RCPP
}
// listToCube
arma::cube listToCube(List mtx_list);
RcppExport SEXP _eflows_listToCube(SEXP mtx_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mtx_list(mtx_listSEXP);
    rcpp_result_gen = Rcpp::wrap(listToCube(mtx_list));
    return rcpp_result_gen;
END_RCPP
}
// cubeToList
List cubeToList(arma::cube xcube);
RcppExport SEXP _eflows_cubeToList(SEXP xcubeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type xcube(xcubeSEXP);
    rcpp_result_gen = Rcpp::wrap(cubeToList(xcube));
    return rcpp_result_gen;
END_RCPP
}
// foreShiftCpp
List foreShiftCpp(List mtx_list, Environment env_fit, Language call, Environment env_current, Language def_demand, double cap, bool cap_spread);
RcppExport SEXP _eflows_foreShiftCpp(SEXP mtx_listSEXP, SEXP env_fitSEXP, SEXP callSEXP, SEXP env_currentSEXP, SEXP def_demandSEXP, SEXP capSEXP, SEXP cap_spreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mtx_list(mtx_listSEXP);
    Rcpp::traits::input_parameter< Environment >::type env_fit(env_fitSEXP);
    Rcpp::traits::input_parameter< Language >::type call(callSEXP);
    Rcpp::traits::input_parameter< Environment >::type env_current(env_currentSEXP);
    Rcpp::traits::input_parameter< Language >::type def_demand(def_demandSEXP);
    Rcpp::traits::input_parameter< double >::type cap(capSEXP);
    Rcpp::traits::input_parameter< bool >::type cap_spread(cap_spreadSEXP);
    rcpp_result_gen = Rcpp::wrap(foreShiftCpp(mtx_list, env_fit, call, env_current, def_demand, cap, cap_spread));
    return rcpp_result_gen;
END_RCPP
}
// model_c
DataFrame model_c(DataFrame df, DataFrame df_battery, double initial_soc, double to_battery_eff, double from_battery_eff, double to_ev_eff, double from_ev_eff, double max_battery_rate, double ev_priority_charge, double ev_priority_discharge, double grid_capacity, bool use_grid_cap, bool use_v2g, double charge_thold, double v2g_thold, double pref_charge_stationary, double pref_discharge_stationary, double pref_charge_ev, double pref_discharge_ev);
RcppExport SEXP _eflows_model_c(SEXP dfSEXP, SEXP df_batterySEXP, SEXP initial_socSEXP, SEXP to_battery_effSEXP, SEXP from_battery_effSEXP, SEXP to_ev_effSEXP, SEXP from_ev_effSEXP, SEXP max_battery_rateSEXP, SEXP ev_priority_chargeSEXP, SEXP ev_priority_dischargeSEXP, SEXP grid_capacitySEXP, SEXP use_grid_capSEXP, SEXP use_v2gSEXP, SEXP charge_tholdSEXP, SEXP v2g_tholdSEXP, SEXP pref_charge_stationarySEXP, SEXP pref_discharge_stationarySEXP, SEXP pref_charge_evSEXP, SEXP pref_discharge_evSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df_battery(df_batterySEXP);
    Rcpp::traits::input_parameter< double >::type initial_soc(initial_socSEXP);
    Rcpp::traits::input_parameter< double >::type to_battery_eff(to_battery_effSEXP);
    Rcpp::traits::input_parameter< double >::type from_battery_eff(from_battery_effSEXP);
    Rcpp::traits::input_parameter< double >::type to_ev_eff(to_ev_effSEXP);
    Rcpp::traits::input_parameter< double >::type from_ev_eff(from_ev_effSEXP);
    Rcpp::traits::input_parameter< double >::type max_battery_rate(max_battery_rateSEXP);
    Rcpp::traits::input_parameter< double >::type ev_priority_charge(ev_priority_chargeSEXP);
    Rcpp::traits::input_parameter< double >::type ev_priority_discharge(ev_priority_dischargeSEXP);
    Rcpp::traits::input_parameter< double >::type grid_capacity(grid_capacitySEXP);
    Rcpp::traits::input_parameter< bool >::type use_grid_cap(use_grid_capSEXP);
    Rcpp::traits::input_parameter< bool >::type use_v2g(use_v2gSEXP);
    Rcpp::traits::input_parameter< double >::type charge_thold(charge_tholdSEXP);
    Rcpp::traits::input_parameter< double >::type v2g_thold(v2g_tholdSEXP);
    Rcpp::traits::input_parameter< double >::type pref_charge_stationary(pref_charge_stationarySEXP);
    Rcpp::traits::input_parameter< double >::type pref_discharge_stationary(pref_discharge_stationarySEXP);
    Rcpp::traits::input_parameter< double >::type pref_charge_ev(pref_charge_evSEXP);
    Rcpp::traits::input_parameter< double >::type pref_discharge_ev(pref_discharge_evSEXP);
    rcpp_result_gen = Rcpp::wrap(model_c(df, df_battery, initial_soc, to_battery_eff, from_battery_eff, to_ev_eff, from_ev_eff, max_battery_rate, ev_priority_charge, ev_priority_discharge, grid_capacity, use_grid_cap, use_v2g, charge_thold, v2g_thold, pref_charge_stationary, pref_discharge_stationary, pref_charge_ev, pref_discharge_ev));
    return rcpp_result_gen;
END_RCPP
}
// divide
NumericVector divide(float x, float precision);
RcppExport SEXP _eflows_divide(SEXP xSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(divide(x, precision));
    return rcpp_result_gen;
END_RCPP
}
// present
NumericVector present(NumericVector vec, int start, int end);
RcppExport SEXP _eflows_present(SEXP vecSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(present(vec, start, end));
    return rcpp_result_gen;
END_RCPP
}
// xts_index
DatetimeVector xts_index(NumericMatrix xts_mtx);
RcppExport SEXP _eflows_xts_index(SEXP xts_mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xts_mtx(xts_mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(xts_index(xts_mtx));
    return rcpp_result_gen;
END_RCPP
}
// signif_ccp
double signif_ccp(double value, int digits);
RcppExport SEXP _eflows_signif_ccp(SEXP valueSEXP, SEXP digitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type digits(digitsSEXP);
    rcpp_result_gen = Rcpp::wrap(signif_ccp(value, digits));
    return rcpp_result_gen;
END_RCPP
}
// tell_min
int tell_min(NumericVector x);
RcppExport SEXP _eflows_tell_min(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tell_min(x));
    return rcpp_result_gen;
END_RCPP
}
// signif_step
NumericVector signif_step(NumericMatrix matrix, float denom);
RcppExport SEXP _eflows_signif_step(SEXP matrixSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< float >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(signif_step(matrix, denom));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_eflows_allocate", (DL_FUNC) &_eflows_allocate, 8},
    {"_eflows_subset_range", (DL_FUNC) &_eflows_subset_range, 3},
    {"_eflows_depreciate", (DL_FUNC) &_eflows_depreciate, 2},
    {"_eflows_seq_depreciated", (DL_FUNC) &_eflows_seq_depreciated, 2},
    {"_eflows_backshift", (DL_FUNC) &_eflows_backshift, 6},
    {"_eflows_formatFlexSteps", (DL_FUNC) &_eflows_formatFlexSteps, 3},
    {"_eflows_divideInChunks", (DL_FUNC) &_eflows_divideInChunks, 2},
    {"_eflows_whichMin", (DL_FUNC) &_eflows_whichMin, 1},
    {"_eflows_sliceCurrent", (DL_FUNC) &_eflows_sliceCurrent, 3},
    {"_eflows_envCurrent", (DL_FUNC) &_eflows_envCurrent, 4},
    {"_eflows_listToCube", (DL_FUNC) &_eflows_listToCube, 1},
    {"_eflows_cubeToList", (DL_FUNC) &_eflows_cubeToList, 1},
    {"_eflows_foreShiftCpp", (DL_FUNC) &_eflows_foreShiftCpp, 7},
    {"_eflows_model_c", (DL_FUNC) &_eflows_model_c, 19},
    {"_eflows_divide", (DL_FUNC) &_eflows_divide, 2},
    {"_eflows_present", (DL_FUNC) &_eflows_present, 3},
    {"_eflows_xts_index", (DL_FUNC) &_eflows_xts_index, 1},
    {"_eflows_signif_ccp", (DL_FUNC) &_eflows_signif_ccp, 2},
    {"_eflows_tell_min", (DL_FUNC) &_eflows_tell_min, 1},
    {"_eflows_signif_step", (DL_FUNC) &_eflows_signif_step, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_eflows(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
