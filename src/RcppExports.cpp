// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// allocate
List allocate(double flow, NumericVector soc, NumericVector vol, NumericVector share, NumericVector level, LogicalVector active, NumericVector eff, NumericVector cap);
RcppExport SEXP eflows_allocate(SEXP flowSEXP, SEXP socSEXP, SEXP volSEXP, SEXP shareSEXP, SEXP levelSEXP, SEXP activeSEXP, SEXP effSEXP, SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type flow(flowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soc(socSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vol(volSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type share(shareSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type level(levelSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type active(activeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eff(effSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cap(capSEXP);
    rcpp_result_gen = Rcpp::wrap(allocate(flow, soc, vol, share, level, active, eff, cap));
    return rcpp_result_gen;
END_RCPP
}
// divide
NumericVector divide(float x, float precision);
RcppExport SEXP eflows_divide(SEXP xSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(divide(x, precision));
    return rcpp_result_gen;
END_RCPP
}
// sumvect
NumericVector sumvect(NumericVector x, NumericVector y);
RcppExport SEXP eflows_sumvect(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(sumvect(x, y));
    return rcpp_result_gen;
END_RCPP
}
// flexlocate
NumericMatrix flexlocate(NumericMatrix matrix, IntegerVector steps);
RcppExport SEXP eflows_flexlocate(SEXP matrixSEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(flexlocate(matrix, steps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"eflows_allocate", (DL_FUNC) &eflows_allocate, 8},
    {"eflows_divide", (DL_FUNC) &eflows_divide, 2},
    {"eflows_sumvect", (DL_FUNC) &eflows_sumvect, 2},
    {"eflows_flexlocate", (DL_FUNC) &eflows_flexlocate, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_eflows(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
